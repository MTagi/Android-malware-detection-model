def trainRF2(pathdata, pathGCN, pathSaveRF):
  dat = readData(pathdata)
  TTrain, TTest, y_train, y_test = train_test_split(dat, dat["label"], test_size=0.3, random_state=42)

  param_grid = {
    "n_estimators": [100, 500, 700, 1000],
    "criterion": ["gini", "entropy"],
    "max_depth": [None, 10, 15, 20, 25, 30],
    "min_samples_leaf": [ 2, 5, 10, 15, 20]
}

  #model
  modelRF = GridSearchCV(RandomForestClassifier(random_state=42), param_grid=param_grid, verbose=3, scoring="f1", cv=5)
  modelTest = GCN(infeats=384, h1feats=100, h2feats=100, h3feats=60, fc_layer=32, outclass=2)
  modelTest.load(pathGCN)

  # Eval
  modelTest.eval()
  with torch.no_grad():
    graphs, label = [loadGraph(file) for file in TTrain['filename']], torch.Tensor(list(TTrain['label'])).long().numpy()
    input = modelTest.vecgen(graphs).numpy()
    print(input.shape)
    modelRF.fit(input, label)
    with open(pathSaveRF, "wb") as file:
      pickle.dump(modelRF, file)
    print("Completed train!!!")

    # Test
    gras, labels = [loadGraph(file) for file in TTest['filename']], torch.Tensor(list(TTest['label'])).long().numpy()
    inp = modelTest.vecgen(gras).numpy()
    out = modelRF.predict(inp)
    print(inp.shape)
    print("accuracy_score:", accuracy_score(out, labels))
    print("f1_score:", f1_score(out, labels))
    print("precision_score:", precision_score(out, labels))
    print("recall_score:", recall_score(out, labels))
trainRF2("/content/drive/MyDrive/data","/content/drive/MyDrive/weight/model_39.pt","/content/drive/MyDrive/weightRF/model2.pt" )
