def demo(pathdata, pathGCN, pathSaveRF):
  dat = readData(pathdata)

  param_grid = {
    "n_estimators": [100, 500, 700, 1000],
    "criterion": ["gini", "entropy"],
    "max_depth": [None, 10, 15, 20, 25, 30],
    "min_samples_leaf": [ 2, 5, 10, 15, 20]
}

  #model
  modelRF = GridSearchCV(RandomForestClassifier(random_state=42), param_grid=param_grid, verbose=3, scoring="f1", cv=5)
  modelTest = GCN(infeats=384, h1feats=100, h2feats=100, h3feats=60, fc_layer=32, outclass=2)
  modelTest.load(pathGCN)
  file=open(pathSaveRF,'rb')
  modelRF=pickle.load(file)


  gras, labels = [loadGraph(file) for file in dat['filename']], torch.Tensor(list(dat['label'])).long().numpy()
  inp = modelTest.vecgen(gras).detach().numpy()
  out = modelRF.predict(inp)
  print("accuracy_score:", accuracy_score(out, labels))
  print("f1_score:", f1_score(out, labels))
  print("precision_score:", precision_score(out, labels))
  print("recall_score:", recall_score(out, labels))
demo("/content/drive/MyDrive/demo","/content/drive/MyDrive/weight/model_39.pt","/content/drive/MyDrive/weightRF/model2.pt" )